{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Cook The Flag","text":"<p>Cook The Flag is a web-based CTF tool that lets you easily extend its functionality with Python-based plugins. It simplifies the use of various CTF tools and techniques, making it easier to tackle a wide range of challenges, from web exploitation to cryptography, and more. The project is designed to grow over time with new features and capabilities.</p>"},{"location":"#features","title":"\ud83d\udcc3 Features","text":"<ul> <li>\ud83e\uddee Basic Encryption (Base64, Hex, ...)</li> <li>\ud83d\udd28 Tools (Requests, NMap, ...)</li> <li>\ud83d\udd0d RegEx search</li> <li>\ud83d\udc33 Docker image</li> </ul>"},{"location":"#in-the-future","title":"\ud83c\udf20 In the future","text":"<ul> <li> \u2795 More tools (RsaCtfTool, ...)</li> <li> \ud83d\udd27 More conversions (Rot13, ...)</li> <li> \ud83c\udf10 Remote access </li> </ul>"},{"location":"#usage","title":"\ud83d\ude80 Usage","text":"<pre><code>curl -s https://raw.githubusercontent.com/zalo-alex/CookTheFlag/refs/heads/main/run.sh | bash\n</code></pre> Other methods (Latest updates) Using DockerHub <pre><code>docker run --pull=always --volume ~/.cooktheflag:/data -p 8080:8080 azalo/cooktheflag\n</code></pre> Using Dockerfile <pre><code>git clone https://github.com/zalo-alex/CookTheFlag\ncd CookTheFlag\nsudo docker build -t cooktheflag .\nsudo docker run --volume ~/.cooktheflag:/data -p 8080:8080 cooktheflag\n</code></pre> Using Python <pre><code>git clone https://github.com/zalo-alex/CookTheFlag\ncd CookTheFlag\npip install -r requirements.txt\npython app.py\n</code></pre>"},{"location":"#contributions","title":"\ud83d\udc64 Contributions","text":"<p>You can make your own modules and share them with a pull request</p>"},{"location":"developer-docs/","title":"Getting started","text":"<ul> <li> File Structure</li> <li> Modules</li> <li> Layout</li> <li> RegEx</li> <li> Parsers</li> <li> Tasks</li> </ul>"},{"location":"developer-docs/file-structure/","title":"File Structure","text":"<p>Here are the important files if you want to create modules: <pre><code>.\n\u251c\u2500 modules/\n\u2514\u2500 src/\n   \u251c\u2500 layout/\n   \u251c\u2500 parsers/\n   \u2514\u2500 regexs.py\n</code></pre></p>"},{"location":"developer-docs/file-structure/#modules","title":"<code>modules/</code>","text":"<p>This folder contains all the modules that will be loaded, you cannot use subfolders.</p>"},{"location":"developer-docs/file-structure/#srclayout","title":"<code>src/layout/</code>","text":"<p>This folder contains all the graphic elements that can be used in the modules. All the elements should be in the <code>__all__</code> of <code>__init__.py</code>.</p>"},{"location":"developer-docs/file-structure/#srcparsers","title":"<code>src/parsers/</code>","text":"<p>This folder contains all the parsers that can be used in the modules, all the elements are in the <code>__all__</code> of <code>__init__.py</code>.</p>"},{"location":"developer-docs/file-structure/#srcregexspy","title":"<code>src/regexs.py</code>","text":"<p>This file contains all the regexes that can be used in the modules.</p> <p>Page is currently in work in progress</p>"},{"location":"developer-docs/layout/","title":"Layout","text":""},{"location":"developer-docs/layout/#input","title":"Input","text":"<pre><code>Input(name, id, type=\"text\", placeholder=\"\", value=\"\", textarea=False, regex = r\"\", parser = None)\n</code></pre> <p>This element is a <code>&lt;input&gt;</code> in HTML.</p> <p><code>name</code></p> <p>The label, only visual</p> <p><code>id</code></p> <p>The actual ID to retrieve and edit values</p> <p><code>type</code>, <code>placeholder</code>, <code>value</code></p> <p>Same as HTML</p> <p><code>textarea</code></p> <p>If true it will use a <code>&lt;textarea&gt;</code> instead of an <code>&lt;input&gt;</code></p> <p><code>regex</code></p> <p>The RegEx that will redirect to the input when a search is done</p> <p><code>parser</code></p> <p>More infos  Parsers</p>"},{"location":"developer-docs/layout/#button","title":"Button","text":"<pre><code>Button(name, id, auto=False)\n</code></pre> <p>The button to submit the data</p> <p><code>name</code></p> <p>The label, only visual</p> <p><code>id</code></p> <p>The type in the submit function</p> <p><code>auto</code></p> <p>Only for client side, will execute submit everytime an input is modified</p> <p>Page is currently in work in progress</p>"},{"location":"developer-docs/modules/","title":"Modules","text":"<p>Here's a basic model of what a module is</p> modules/hello.py<pre><code>from src.module import Module\nfrom src.layout import *\n\nclass CustomModule(Module):\n    name = \"Say Hello\"\n    category = \"random-utils\"\n    layout = [\n        Input(\"Your name\", \"name-input\"),\n        Submit(\"Say\", \"say\"),\n        Input(\"Response\", \"response\")\n    ]\n\n    def submit(type, data):\n        return {\n            \"response\": \"Hello \" + data[\"name-input\"]\n        }\n</code></pre> <p><code>category</code></p> <p>Should be in lowercase with '-' instead of spaces</p> <p><code>layout</code></p> <p>A list of Layout elements, the <code>Submit</code> will trigger the <code>submit</code> function with his type (here <code>say</code>)</p> <p><code>submit(type, data)</code></p> <p><code>type</code> is the type of the submitter <code>data</code> a dict with all the contents of the inputs, the key is the ID of the element It returns a dict with each content to change, element ID and value. There are no timeouts</p>"},{"location":"developer-docs/modules/#client-side","title":"Client side","text":"<p>By adding a <code>script</code> attribute to <code>CustomModule</code> you can make your module client side. You will have to make it in JavaScript, the <code>type</code> and <code>data</code> are already initialized, no need to create a function</p> <pre><code>from src.module import Module\nfrom src.layout import *\n\nclass CustomModule(Module):\n    ...\n\n    script = \"\"\"return {\n        \"response\": \"Hello \" + data[\"name-input\"]\n    }\"\"\"\n</code></pre>"},{"location":"developer-docs/modules/#module-regex","title":"Module RegEx","text":"<p>With the <code>regex</code> you can specify an expression for the module and not only to an input. It can be usefull if the user want to know the type of string he's searching. For more info about RegEx see  RegEx</p> <pre><code>from src.regexs import RegExs\n\nclass CustomModule(Module):\n    name = \"Base64 Encode\"\n    category = \"encoding\"\n    regex = RegExs.BASE64\n</code></pre>"},{"location":"developer-docs/modules/#streaming-response","title":"Streaming response","text":"<p>I you need modify multiple times your response, for exemple with CLI, you can use <code>yield</code> instead of <code>return</code></p> <pre><code>class CustomModule(Module):\n    ...\n\n    def submit(type, data):\n        for i in range(10):\n            yield {\n                \"result\": i\n            }\n            time.sleep(1)\n</code></pre> <p>Page is currently in work in progress</p>"},{"location":"developer-docs/parsers/","title":"Parsers","text":"<p>Parsers are side agnostic input data preprocessor, they can be used for server side and client side inputs, they will take the data and parse it before the module processing.</p> <pre><code>from src.parsers import BinaryParser\n\nclass CustomModule(Module):\n    layout = [\n        Input(\"Bin Input\", \"input\", parser=BinaryParser()),\n    ]\n\n    def submit(type, data):\n        data[\"input\"]\n        # The data will be parsed for an easier processing\n        # 0b1 10 --&gt; 110\n        # 01 010 --&gt; 01010\n        # 0b 011 --&gt; 011\n</code></pre> <p>Page is currently in work in progress</p>"},{"location":"developer-docs/regex/","title":"RegEx","text":"<p>RegEx allow users to find the right module easily, when going to the home you have a search box that will return you modules by RegEx matching.  </p> <p>To specify a RegEx you can either use <code>re.compile</code> or use premade RegExs inside <code>src/regexs.py</code></p>"},{"location":"developer-docs/regex/#module-scoped","title":"Module scoped","text":"<p>This will help the user to have an idea of what the data he have could be. In this case, if the user search for <code>0x123</code> the \"Hex to Binary\" will show.</p> <pre><code>from src.regexs import RegExs\n\nclass CustomModule(Module):\n    name = \"Hex to Binary\"\n    regex = re.compile(r\"^(0x)?[0-9a-fA-F]+(?:\\s[0-9a-fA-F]+)*$\")\n</code></pre>"},{"location":"developer-docs/regex/#input-scoped","title":"Input scoped","text":"<p>Input scoped RegEx, is more powerfull than Module scoped since it automaticly fill the input for the user. This example use the premade RegEx, which in this case is equivalent to <code>re.compile(r\"^(0b)?[01]+(?:\\s[01]+)*$\")</code></p> modules/hello.py<pre><code>from src.regexs import RegExs\n\nclass CustomModule(Module):\n    [...]\n    layout = [\n        Input(\"Binary Input\", \"input\", regex=RegExs.BIN)\n    ]\n</code></pre> <p>Page is currently in work in progress</p>"},{"location":"developer-docs/tasks/","title":"Tasks","text":"<p>To create background task you can use <code>Task</code> and <code>Tasks</code> class. A task have 3 methods, the <code>__init__()</code> which can throw an error if you need for error handling, then <code>run()</code> that's ran in a thread, and <code>cleanup()</code> to end the task.</p> src/tasks.py<pre><code>class Task:\n    name = \"Undefined\"\n\n    def __init__(self):\n        \"\"\"Pre run execution, can throw an exception\"\"\"\n        self.id = str(uuid.uuid4())\n\n    def run(self):\n        \"\"\"Run the task, ran in a separate thread\"\"\"\n\n    def cleanup(self):\n        \"\"\"Post run or cancel cleanup\"\"\"\n</code></pre>"},{"location":"developer-docs/tasks/#usage-example","title":"Usage example","text":"modules/test_tasks.py<pre><code>[...]\nfrom src.tasks import Task, Tasks\n\nclass MyTask(Task):\n    name = \"My Task\"\n\n    def __init__(self, name):\n        super().__init__()\n        self.running = True\n        self.name = name\n        print(\"My task is initialized!\")\n\n    def run(self):\n        while self.running:\n            print(f\"Hello {self.name}\")\n            time.sleep(1)\n\n    def cleanup(self):\n        self.running = False\n\nclass CustomModule(Module):\n    [...]\n\n    def submit(type, data):\n        task = MyTask(data.get(\"name\"))\n        Tasks.start(task)\n</code></pre> <p>See <code>modules/http_exploit_server.py</code> for an other example</p> <p>Page is currently in work in progress</p>"}]}